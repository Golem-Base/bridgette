package webui

import (
	"fmt"
	"time"
)

templ Layout(title string) {
	<!DOCTYPE html>
	<html lang="en">
		<head>
			<meta charset="UTF-8"/>
			<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
			<title>{ title } - Golem Bridge Monitor</title>
			<script src="https://unpkg.com/htmx.org@2.0.4"></script>
			<script src="https://unpkg.com/morphdom@2.6.1/dist/morphdom-umd.js"></script>
			<script src="https://unpkg.com/htmx.org/dist/ext/morphdom-swap.js"></script>
			<script src="https://cdn.tailwindcss.com"></script>
			<style>
				:root {
					--golem-primary: #1a3ad3;
					--golem-secondary: #0a1c8f;
					--golem-accent: #e2eaf8;
					--golem-text: #333;
					--golem-background: #f9fbfe;
				}
				body {
					font-family: ui-sans-serif, system-ui, sans-serif;
					background-color: var(--golem-background);
					color: var(--golem-text);
				}
				.golem-header {
					background-color: var(--golem-primary);
					color: white;
				}
				.golem-button {
					background-color: var(--golem-primary);
					color: white;
					border-radius: 0.375rem;
					padding: 0.5rem 1rem;
					font-weight: 600;
					transition: background-color 0.2s;
				}
				.golem-button:hover {
					background-color: var(--golem-secondary);
				}
				.golem-card {
					background-color: white;
					border-radius: 0.5rem;
					box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
					padding: 1.5rem;
				}
				.timeline-item {
					border-left: 2px solid var(--golem-primary);
					padding-left: 1.5rem;
					padding-bottom: 2rem;
					position: relative;
				}
				.timeline-item::before {
					content: '';
					position: absolute;
					left: -8px;
					top: 0;
					height: 14px;
					width: 14px;
					background-color: var(--golem-primary);
					border-radius: 50%;
				}
				.timeline-container {
					margin-left: 1rem;
				}
			</style>
		</head>
		<body hx-ext="morphdom-swap">
			<header class="golem-header py-4">
				<div class="container mx-auto px-4">
					<div class="flex items-center justify-between">
						<div class="flex items-center">
							<h1 class="text-2xl font-bold">Golem Bridge Monitor</h1>
						</div>
					</div>
				</div>
			</header>
			<main class="container mx-auto px-4 py-8">
				{ children... }
			</main>
			<footer class="py-6 mt-12 border-t border-gray-200">
				<div class="container mx-auto px-4">
					<p class="text-center text-gray-600">Â© { time.Now().Year() } Golem Network. All rights reserved.</p>
				</div>
			</footer>
		</body>
	</html>
}

// Dashboard is the main page template
templ Dashboard() {
	@Layout("Dashboard") {
		<div class="space-y-8">
			<div id="dashboard-metrics" hx-get="/dashboard/metrics" hx-trigger="load"></div>
			<div id="bridge-performance" hx-get="/dashboard/performance" hx-trigger="load"></div>
			<div id="unmatched-deposits-section" hx-get="/dashboard/unmatched" hx-trigger="load"></div>
			<div id="deposits-timeline-section" hx-get="/dashboard/timeline" hx-trigger="load"></div>
		</div>
	}
}

// DashboardMetrics contains the metrics cards
templ DashboardMetrics(stats map[string]interface{}) {
	<div hx-get="/dashboard/metrics" hx-trigger="every 2s" hx-swap="morphdom" hx-swap="outerHTML">
		<div class="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
			<div class="golem-card">
				<h3 class="text-lg font-semibold mb-2">Total Matched Deposits</h3>
				<p class="text-3xl font-bold">{ fmt.Sprintf("%d", stats["total_matched"].(int)) }</p>
			</div>
			<div class="golem-card">
				<h3 class="text-lg font-semibold mb-2">Average Confirmation Time</h3>
				<p class="text-3xl font-bold">{ fmt.Sprintf("%.1f sec", stats["avg_time_diff"].(float64)) }</p>
			</div>
			<div class="golem-card">
				<h3 class="text-lg font-semibold mb-2">Total Bridged ETH</h3>
				<p class="text-3xl font-bold">{ fmt.Sprintf("%.4f ETH", stats["total_bridged_eth"].(float64)) }</p>
			</div>
		</div>
		<div class="grid grid-cols-1 md:grid-cols-3 gap-6">
			<div class="golem-card">
				<h3 class="text-lg font-semibold mb-2 text-amber-600">Unmatched Deposits</h3>
				<p class="text-3xl font-bold text-amber-600">{ fmt.Sprintf("%d", stats["pending_deposits"].(int)) }</p>
			</div>
			<div class="golem-card">
				<h2 class="text-xl font-bold mb-4">Latest L1 Block</h2>
				<div class="grid grid-cols-2 gap-4">
					<div>
						<h4 class="text-sm font-medium text-gray-500">Block Number</h4>
						<p class="text-lg font-semibold">{ fmt.Sprintf("%d", stats["latest_l1_block"].(int)) }</p>
					</div>
					<div>
						<h4 class="text-sm font-medium text-gray-500">Time Since</h4>
						<p class="text-lg font-semibold">{ fmt.Sprintf("%.1f sec", stats["l1_time_since"].(float64)) }</p>
					</div>
				</div>
			</div>
			<div class="golem-card">
				<h2 class="text-xl font-bold mb-4">Latest L2 Block</h2>
				<div class="grid grid-cols-2 gap-4">
					<div>
						<h4 class="text-sm font-medium text-gray-500">Block Number</h4>
						<p class="text-lg font-semibold">{ fmt.Sprintf("%d", stats["latest_l2_block"].(int)) }</p>
					</div>
					<div>
						<h4 class="text-sm font-medium text-gray-500">Time Since</h4>
						<p class="text-lg font-semibold">{ fmt.Sprintf("%.1f sec", stats["l2_time_since"].(float64)) }</p>
					</div>
				</div>
			</div>
		</div>
	</div>
}

// BridgePerformance contains the bridge performance stats
templ BridgePerformance(stats map[string]interface{}) {
	<div class="golem-card" hx-get="/dashboard/performance" hx-trigger="every 3s" hx-swap="morphdom" hx-swap="outerHTML">
		<h2 class="text-xl font-bold mb-4">Bridge Performance</h2>
		<div class="grid grid-cols-1 md:grid-cols-3 gap-4">
			<div>
				<h4 class="text-sm font-medium text-gray-500">Minimum Time</h4>
				<p class="text-lg font-semibold">{ fmt.Sprintf("%.1f sec", stats["min_time_diff"].(float64)) }</p>
			</div>
			<div>
				<h4 class="text-sm font-medium text-gray-500">Average Time</h4>
				<p class="text-lg font-semibold">{ fmt.Sprintf("%.1f sec", stats["avg_time_diff"].(float64)) }</p>
			</div>
			<div>
				<h4 class="text-sm font-medium text-gray-500">Maximum Time</h4>
				<p class="text-lg font-semibold">{ fmt.Sprintf("%.1f sec", stats["max_time_diff"].(float64)) }</p>
			</div>
		</div>
	</div>
}

// UnmatchedDepositsSection contains the unmatched deposits section
templ UnmatchedDepositsSection(deposits []UnmatchedDeposit, page, totalPages int) {
	<div class="golem-card" hx-get={ fmt.Sprintf("/dashboard/unmatched?page=%d", page) } hx-trigger="every 2s" hx-swap="morphdom" hx-swap="outerHTML">
		<div class="mb-6">
			<h2 class="text-xl font-bold text-amber-600">Unmatched Deposits</h2>
			<p class="text-sm text-gray-600">Deposits waiting for L2 confirmation</p>
		</div>
		<div class="timeline-container">
			if len(deposits) == 0 {
				<p class="text-center py-6 text-gray-500">No unmatched deposits found</p>
			} else {
				for _, deposit := range deposits {
					@UnmatchedDepositItem(deposit)
				}
			}
		</div>
		if totalPages > 1 {
			<div class="flex justify-between items-center mt-6">
				<div>
					<span class="text-sm text-gray-600">Page { fmt.Sprintf("%d of %d", page, totalPages) }</span>
				</div>
				<div class="flex space-x-2">
					if page > 1 {
						<button
							class="golem-button"
							hx-get={ fmt.Sprintf("/dashboard/unmatched?page=%d", page-1) }
							hx-target="closest .golem-card"
							hx-swap="morphdom"
						>
							Previous
						</button>
					}
					if page < totalPages {
						<button
							class="golem-button"
							hx-get={ fmt.Sprintf("/dashboard/unmatched?page=%d", page+1) }
							hx-target="closest .golem-card"
							hx-swap="morphdom"
						>
							Next
						</button>
					}
				</div>
			</div>
		}
	</div>
}

// DepositsTimelineSection contains the deposits timeline section
templ DepositsTimelineSection(deposits []DepositPair, page, totalPages int) {
	<div class="golem-card" hx-get={ fmt.Sprintf("/dashboard/timeline?page=%d", page) } hx-trigger="every 5s" hx-swap="morphdom" hx-swap="outerHTML">
		<div class="mb-6">
			<h2 class="text-xl font-bold">Deposit Timeline</h2>
		</div>
		<div class="timeline-container">
			if len(deposits) == 0 {
				<p class="text-center py-6 text-gray-500">No deposits found</p>
			} else {
				for _, deposit := range deposits {
					@DepositItem(deposit)
				}
			}
		</div>
		if totalPages > 1 {
			<div class="flex justify-between items-center mt-6">
				<div>
					<span class="text-sm text-gray-600">Page { fmt.Sprintf("%d of %d", page, totalPages) }</span>
				</div>
				<div class="flex space-x-2">
					if page > 1 {
						<button
							class="golem-button"
							hx-get={ fmt.Sprintf("/dashboard/timeline?page=%d", page-1) }
							hx-target="closest .golem-card"
							hx-swap="morphdom"
						>
							Previous
						</button>
					}
					if page < totalPages {
						<button
							class="golem-button"
							hx-get={ fmt.Sprintf("/dashboard/timeline?page=%d", page+1) }
							hx-target="closest .golem-card"
							hx-swap="morphdom"
						>
							Next
						</button>
					}
				</div>
			</div>
		}
	</div>
}

// UnmatchedDepositItem displays a single unmatched deposit
templ UnmatchedDepositItem(deposit UnmatchedDeposit) {
	<div class="timeline-item">
		<div class="golem-card border-l-4 border-amber-500">
			<div class="flex justify-between items-start mb-4">
				<div>
					<h3 class="text-lg font-semibold">{ fmt.Sprintf("%.4f ETH", deposit.Amount) }</h3>
					<p class="text-sm text-gray-600">From: { shortenAddress(deposit.FromAddress) }</p>
					<p class="text-sm text-gray-600">To: { shortenAddress(deposit.ToAddress) }</p>
				</div>
				<div class="px-3 py-1 rounded-full bg-amber-100 text-amber-800 text-sm font-medium">
					Waiting: { formatTimeDiff(deposit.TimeSinceSeconds) }
				</div>
			</div>
			<div>
				<h4 class="text-xs font-medium text-gray-500 uppercase mb-1">L1 Deposit</h4>
				<p class="text-sm">Block: { fmt.Sprintf("%d", deposit.L1BlockNumber) }</p>
				<p class="text-sm">Time: { formatTime(deposit.L1Timestamp) }</p>
				<span class="text-sm text-blue-600 overflow-hidden text-ellipsis whitespace-nowrap block">
					Tx: { shortenAddress(deposit.TxHashL1) }
				</span>
			</div>
		</div>
	</div>
}

// DepositItem displays a single deposit
templ DepositItem(deposit DepositPair) {
	<div class="timeline-item">
		<div class="golem-card">
			<div class="flex justify-between items-start mb-4">
				<div>
					<h3 class="text-lg font-semibold">{ fmt.Sprintf("%.4f ETH", deposit.Amount) }</h3>
					<p class="text-sm text-gray-600">From: { shortenAddress(deposit.FromAddress) }</p>
					<p class="text-sm text-gray-600">To: { shortenAddress(deposit.ToAddress) }</p>
				</div>
				<div class="px-3 py-1 rounded-full bg-blue-100 text-blue-800 text-sm font-medium">
					{ formatTimeDiff(deposit.TimeDiffSeconds) }
				</div>
			</div>
			<div class="grid grid-cols-1 md:grid-cols-2 gap-4">
				<div>
					<h4 class="text-xs font-medium text-gray-500 uppercase mb-1">L1 Deposit</h4>
					<p class="text-sm">Block: { fmt.Sprintf("%d", deposit.L1BlockNumber) }</p>
					<p class="text-sm">Time: { formatTime(deposit.L1Timestamp) }</p>
					<span class="text-sm text-blue-600 overflow-hidden text-ellipsis whitespace-nowrap block">
						Tx: { shortenAddress(deposit.TxHashL1) }
					</span>
				</div>
				<div>
					<h4 class="text-xs font-medium text-gray-500 uppercase mb-1">L2 Confirmation</h4>
					<p class="text-sm">Block: { fmt.Sprintf("%d", deposit.L2BlockNumber) }</p>
					<p class="text-sm">Time: { formatTime(deposit.L2Timestamp) }</p>
					<span class="text-sm text-blue-600 overflow-hidden text-ellipsis whitespace-nowrap block">
						Tx: { shortenAddress(deposit.TxHashL2) }
					</span>
				</div>
			</div>
		</div>
	</div>
}
