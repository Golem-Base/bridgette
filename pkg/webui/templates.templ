package webui

import (
	"fmt"
	"time"
)

// Helper function to prefix URLs with pathPrefix
func prefixURL(pathPrefix, url string) string {
	if pathPrefix == "" {
		return url
	}
	// Ensure pathPrefix starts with / but doesn't end with /
	prefix := pathPrefix
	if prefix[0] != '/' {
		prefix = "/" + prefix
	}
	if prefix[len(prefix)-1] == '/' {
		prefix = prefix[:len(prefix)-1]
	}
	return prefix + url
}

templ Layout(title string, pathPrefix string) {
	<!DOCTYPE html>
	<html lang="en">
		<head>
			<meta charset="UTF-8"/>
			<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
			<title>{ title } - Golem Bridge Monitor</title>
			<script src={ prefixURL(pathPrefix, "/static/js/htmx.min.js") }></script>
			<script src={ prefixURL(pathPrefix, "/static/js/morphdom.min.js") }></script>
			<script src={ prefixURL(pathPrefix, "/static/js/morphdom-swap.js") }></script>
			<script src={ prefixURL(pathPrefix, "/static/js/tailwind.min.js") }></script>
			<style>
				* {
					margin: 0;
					padding: 0;
					box-sizing: border-box;
				}

				:root {
					--arkiv-blue: #181EA9;
					--arkiv-orange: #FE7445;
					--black: #1F1F1F;
					--white: #FFFFFF;
					--gray-light: #F1F1F1;
					--gray-neutral: #ACACAC;
				}

				body {
					font-family: 'Courier New', monospace;
					color: var(--black);
					line-height: 1.6;
					background: var(--white);
				}

				h1, h2, h3 {
					font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif !important;
					font-weight: 900 !important;
					text-transform: uppercase !important;
					letter-spacing: -0.02em !important;
				}

				header h1 {
					font-size: 80px !important;
					line-height: 80px !important;
					margin-bottom: 1.5rem !important;
					color: var(--black) !important;
					letter-spacing: -0.02em !important;
				}
				

				.container {
					max-width: 1280px;
					margin: 0 auto;
					padding: 0 60px;
				}

				@media (max-width: 768px) {
					.container {
						padding: 0 1rem;
					}
				}


				/* Header */
				header {
					padding: 64px 0;
					text-align: center;
					background: var(--white);
				}

				.logo {
					font-size: 14px !important;
					font-weight: 600 !important;
					letter-spacing: 0.1em !important;
					color: var(--arkiv-blue) !important;
					margin-bottom: 2rem !important;
				}

				.subtitle {
					font-size: 16px !important;
					color: var(--gray-neutral) !important;
					font-weight: 400 !important;
					margin-bottom: 2rem !important;
				}

				.status-badge {
					display: inline-flex;
					align-items: center;
					gap: 8px;
					background: var(--white);
					border: 2px solid var(--arkiv-orange);
					color: var(--arkiv-orange);
					padding: 8px 20px;
					border-radius: 24px;
					font-size: 12px;
					font-weight: 700;
					text-transform: uppercase;
					letter-spacing: 0.05em;
				}

				.status-dot {
					width: 8px;
					height: 8px;
					background: var(--arkiv-orange);
					border-radius: 50%;
					animation: pulse 2s infinite;
				}

				@keyframes pulse {
					0%, 100% { opacity: 1; }
					50% { opacity: 0.4; }
				}

				/* Section */
				section {
					padding: 64px 0;
				}

				section:nth-child(even) {
					background: var(--gray-light);
				}

				.section-title {
					font-size: clamp(32px, 5vw, 48px);
					margin-bottom: 48px;
					color: var(--black);
				}

				.section-title::before {
					content: "[ ";
					color: var(--arkiv-orange);
				}

				.section-title::after {
					content: " ]";
					color: var(--arkiv-orange);
				}

				/* Cards */
				.card-grid {
					display: grid;
					grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
					gap: 32px;
				}

				.card {
					background: var(--white);
					padding: 32px;
					border-radius: 24px;
					box-shadow: 0 4px 24px rgba(0, 0, 0, 0.08);
					transition: transform 0.3s, box-shadow 0.3s;
				}

				.card:hover {
					transform: translateY(-4px);
					box-shadow: 0 8px 32px rgba(24, 30, 169, 0.12);
				}

				.card-label {
					font-size: 12px;
					color: var(--gray-neutral);
					text-transform: uppercase;
					letter-spacing: 0.05em;
					margin-bottom: 8px;
					font-weight: 600;
				}

				.card-value {
					font-size: 16px;
					color: var(--black);
					font-weight: 600;
					word-break: break-all;
				}

				.metric-card {
					background: var(--white);
					padding: 32px;
					border-radius: 24px;
					box-shadow: 0 4px 24px rgba(0, 0, 0, 0.08);
					transition: transform 0.3s, box-shadow 0.3s;
				}

				.metric-card:hover {
					transform: translateY(-2px);
					box-shadow: 0 8px 32px rgba(24, 30, 169, 0.12);
				}

				.metric-label {
					font-size: 12px;
					color: var(--gray-neutral);
					text-transform: uppercase;
					letter-spacing: 0.05em;
					margin-bottom: 12px;
					font-weight: 600;
				}

				.metric-value {
					font-size: 2rem;
					font-weight: 900;
					color: var(--black);
				}

				.golem-card {
					background: var(--white);
					padding: 32px;
					border-radius: 24px;
					box-shadow: 0 4px 24px rgba(0, 0, 0, 0.08);
					margin-bottom: 24px;
				}

				.golem-button {
					padding: 12px 24px;
					background: var(--arkiv-blue);
					color: var(--white);
					border: none;
					border-radius: 24px;
					cursor: pointer;
					font-size: 12px;
					font-weight: 700;
					text-transform: uppercase;
					transition: all 0.3s;
					font-family: 'Courier New', monospace;
				}

				.golem-button:hover {
					background: var(--arkiv-orange);
					transform: scale(1.05);
				}

				.timeline-container {
					margin-left: 0;
				}

				.timeline-item {
					margin-bottom: 24px;
				}

				/* Footer */
				footer {
					background: var(--black);
					color: white;
					padding: 64px 0;
					text-align: center;
				}

				.footer-logo {
					font-size: 14px;
					font-weight: 600;
					letter-spacing: 0.1em;
					margin-bottom: 16px;
					color: var(--arkiv-orange);
				}

				footer p {
					font-size: 14px;
					opacity: 0.7;
				}

				footer a {
					color: var(--arkiv-orange);
					text-decoration: none;
					font-weight: 600;
					transition: opacity 0.3s;
				}

				footer a:hover {
					opacity: 0.8;
				}

				/* Responsive */
				@media (max-width: 768px) {
					h1 {
						font-size: 36px;
					}

					.section-title {
						font-size: 28px;
					}

					section {
						padding: 48px 0;
					}
				}

				/* Status colors */
				.text-amber-600, .text-amber-400, .text-amber-300 {
					color: var(--arkiv-orange) !important;
				}

				.border-amber-500, .border-amber-400 {
					border-color: var(--arkiv-orange) !important;
				}

				.bg-amber-500\/20 {
					background: rgba(254, 116, 69, 0.1) !important;
				}

				.text-green-300, .text-green-400 {
					color: #10b981 !important;
				}

				.bg-green-500\/20 {
					background: rgba(16, 185, 129, 0.1) !important;
				}

				.border-green-400 {
					border-color: #10b981 !important;
				}

				.text-blue-400 {
					color: var(--arkiv-blue) !important;
				}

				.text-gray-500, .text-gray-600 {
					color: var(--gray-neutral) !important;
				}

				.border-l-4 {
					border-left: 4px solid var(--arkiv-orange) !important;
				}
			</style>
		</head>
		<body hx-ext="morphdom-swap">
			<header>
				<div class="container">
					<div class="logo">[ ARKIV ]</div>
					<h1>ARKIV BRIDGE</h1>
					<p class="subtitle">Cross-chain Transaction Tracking</p>
				</div>
			</header>

			<main>
				{ children... }
			</main>

			<footer>
				<div class="container">
					<div class="footer-logo">[ ARKIV ]</div>
					<p>Powered by <a href="https://www.golem.network/" target="_blank">Golem Network</a></p>
					<p style="margin-top: 8px;">Â© { time.Now().Year() } Arkiv. All rights reserved.</p>
				</div>
			</footer>
		</body>
	</html>
}

// Dashboard is the main page template
templ Dashboard(pathPrefix string) {
	@Layout("Dashboard", pathPrefix) {
		<section>
			<div class="container">
				<div id="dashboard-metrics" hx-get={ prefixURL(pathPrefix, "/dashboard/metrics") } hx-trigger="load"></div>
			</div>
		</section>
		<section>
			<div class="container">
				<div id="bridge-performance" hx-get={ prefixURL(pathPrefix, "/dashboard/performance") } hx-trigger="load"></div>
			</div>
		</section>
		<section>
			<div class="container">
				@TimeSeriesChart(pathPrefix)
			</div>
		</section>
		<section>
			<div class="container">
				<div id="unmatched-deposits-section" hx-get={ prefixURL(pathPrefix, "/dashboard/unmatched") } hx-trigger="load"></div>
			</div>
		</section>
		<section>
			<div class="container">
				<div id="deposits-timeline-section" hx-get={ prefixURL(pathPrefix, "/dashboard/timeline") } hx-trigger="load"></div>
			</div>
		</section>
	}
}

// DashboardMetrics contains the metrics cards
templ DashboardMetrics(stats map[string]interface{}, pathPrefix string) {
	<div hx-get={ prefixURL(pathPrefix, "/dashboard/metrics") } hx-trigger="every 2s" hx-swap="morphdom" hx-swap="outerHTML">
		<h2 class="section-title">Network Metrics</h2>
		<div class="card-grid" style="margin-bottom: 32px;">
			<div class="metric-card">
				<div class="metric-label">Total Matched Deposits</div>
				<div class="metric-value">{ fmt.Sprintf("%d", stats["total_matched"].(int)) }</div>
			</div>
			<div class="metric-card">
				<div class="metric-label">Average Confirmation Time</div>
				<div class="metric-value">{ fmt.Sprintf("%.1f sec", stats["avg_time_diff"].(float64)) }</div>
			</div>
			<div class="metric-card">
				<div class="metric-label">Total Bridged ETH</div>
				<div class="metric-value">{ fmt.Sprintf("%.4f ETH", stats["total_bridged_eth"].(float64)) }</div>
			</div>
		</div>
		<div class="card-grid">
			<div class="metric-card" style="border: 2px solid var(--arkiv-orange);">
				<div class="metric-label" style="color: var(--arkiv-orange);">Unmatched Deposits</div>
				<div class="metric-value" style="color: var(--arkiv-orange);">{ fmt.Sprintf("%d", stats["pending_deposits"].(int)) }</div>
			</div>
			<div class="metric-card">
				<div class="metric-label" style="margin-bottom: 16px;">Latest L1 Block</div>
				<div style="display: grid; grid-template-columns: 1fr 1fr; gap: 16px;">
					<div>
						<div style="font-size: 10px; color: var(--gray-neutral); text-transform: uppercase; margin-bottom: 4px;">Block Number</div>
						<div style="font-size: 1.125rem; font-weight: 700; color: var(--black);">{ fmt.Sprintf("%d", stats["latest_l1_block"].(int)) }</div>
					</div>
					<div>
						<div style="font-size: 10px; color: var(--gray-neutral); text-transform: uppercase; margin-bottom: 4px;">Time Since</div>
						<div style="font-size: 1.125rem; font-weight: 700; color: var(--black);">{ fmt.Sprintf("%.1f sec", stats["l1_time_since"].(float64)) }</div>
					</div>
				</div>
			</div>
			<div class="metric-card">
				<div class="metric-label" style="margin-bottom: 16px;">Latest L2 Block</div>
				<div style="display: grid; grid-template-columns: 1fr 1fr; gap: 16px;">
					<div>
						<div style="font-size: 10px; color: var(--gray-neutral); text-transform: uppercase; margin-bottom: 4px;">Block Number</div>
						<div style="font-size: 1.125rem; font-weight: 700; color: var(--black);">{ fmt.Sprintf("%d", stats["latest_l2_block"].(int)) }</div>
					</div>
					<div>
						<div style="font-size: 10px; color: var(--gray-neutral); text-transform: uppercase; margin-bottom: 4px;">Time Since</div>
						<div style="font-size: 1.125rem; font-weight: 700; color: var(--black);">{ fmt.Sprintf("%.1f sec", stats["l2_time_since"].(float64)) }</div>
					</div>
				</div>
			</div>
		</div>
	</div>
}

// BridgePerformance contains the bridge performance stats
templ BridgePerformance(stats map[string]interface{}, pathPrefix string) {
	<div hx-get={ prefixURL(pathPrefix, "/dashboard/performance") } hx-trigger="every 3s" hx-swap="morphdom" hx-swap="outerHTML">
		<h2 class="section-title">Bridge Performance</h2>
		<div class="card-grid">
			<div class="metric-card">
				<div class="metric-label">Minimum Time</div>
				<div class="metric-value">{ fmt.Sprintf("%.1f sec", stats["min_time_diff"].(float64)) }</div>
			</div>
			<div class="metric-card">
				<div class="metric-label">Average Time</div>
				<div class="metric-value">{ fmt.Sprintf("%.1f sec", stats["avg_time_diff"].(float64)) }</div>
			</div>
			<div class="metric-card">
				<div class="metric-label">Maximum Time</div>
				<div class="metric-value">{ fmt.Sprintf("%.1f sec", stats["max_time_diff"].(float64)) }</div>
			</div>
		</div>
	</div>
}

// UnmatchedDepositsSection contains the unmatched deposits section
templ UnmatchedDepositsSection(deposits []UnmatchedDeposit, page, totalPages int, pathPrefix string) {
	<div hx-get={ prefixURL(pathPrefix, fmt.Sprintf("/dashboard/unmatched?page=%d", page)) } hx-trigger="every 2s" hx-swap="morphdom" hx-swap="outerHTML">
		<h2 class="section-title">Unmatched Deposits</h2>
		<p style="font-size: 14px; color: var(--gray-neutral); margin-bottom: 32px;">Deposits waiting for L2 confirmation</p>
		<div class="timeline-container">
			if len(deposits) == 0 {
				<p style="text-align: center; padding: 3rem 0; color: var(--gray-neutral);">No unmatched deposits found</p>
			} else {
				for _, deposit := range deposits {
					@UnmatchedDepositItem(deposit)
				}
			}
		</div>
		if totalPages > 1 {
			<div style="display: flex; justify-content: space-between; align-items: center; margin-top: 32px;">
				<div>
					<span style="font-size: 14px; color: var(--gray-neutral);">Page { fmt.Sprintf("%d of %d", page, totalPages) }</span>
				</div>
				<div style="display: flex; gap: 12px;">
					if page > 1 {
						<button
							class="golem-button"
							hx-get={ prefixURL(pathPrefix, fmt.Sprintf("/dashboard/unmatched?page=%d", page-1)) }
							hx-target="closest div"
							hx-swap="morphdom"
						>
							Previous
						</button>
					}
					if page < totalPages {
						<button
							class="golem-button"
							hx-get={ prefixURL(pathPrefix, fmt.Sprintf("/dashboard/unmatched?page=%d", page+1)) }
							hx-target="closest div"
							hx-swap="morphdom"
						>
							Next
						</button>
					}
				</div>
			</div>
		}
	</div>
}

// DepositsTimelineSection contains the deposits timeline section
templ DepositsTimelineSection(deposits []DepositPair, page, totalPages int, pathPrefix string) {
	<div hx-get={ prefixURL(pathPrefix, fmt.Sprintf("/dashboard/timeline?page=%d", page)) } hx-trigger="every 5s" hx-swap="morphdom" hx-swap="outerHTML">
		<h2 class="section-title">Deposit Timeline</h2>
		<div class="timeline-container">
			if len(deposits) == 0 {
				<p style="text-align: center; padding: 3rem 0; color: var(--gray-neutral);">No deposits found</p>
			} else {
				for _, deposit := range deposits {
					@DepositItem(deposit)
				}
			}
		</div>
		if totalPages > 1 {
			<div style="display: flex; justify-content: space-between; align-items: center; margin-top: 32px;">
				<div>
					<span style="font-size: 14px; color: var(--gray-neutral);">Page { fmt.Sprintf("%d of %d", page, totalPages) }</span>
				</div>
				<div style="display: flex; gap: 12px;">
					if page > 1 {
						<button
							class="golem-button"
							hx-get={ prefixURL(pathPrefix, fmt.Sprintf("/dashboard/timeline?page=%d", page-1)) }
							hx-target="closest div"
							hx-swap="morphdom"
						>
							Previous
						</button>
					}
					if page < totalPages {
						<button
							class="golem-button"
							hx-get={ prefixURL(pathPrefix, fmt.Sprintf("/dashboard/timeline?page=%d", page+1)) }
							hx-target="closest div"
							hx-swap="morphdom"
						>
							Next
						</button>
					}
				</div>
			</div>
		}
	</div>
}

// UnmatchedDepositItem displays a single unmatched deposit
templ UnmatchedDepositItem(deposit UnmatchedDeposit) {
	<div class="golem-card" style="border-left: 4px solid var(--arkiv-orange);">
		<div style="display: flex; justify-content: space-between; align-items: flex-start; margin-bottom: 24px;">
			<div>
				<h3 style="font-size: 1.25rem; font-weight: 700; color: var(--black); margin-bottom: 8px;">{ fmt.Sprintf("%.4f ETH", deposit.Amount) }</h3>
				<p style="font-size: 14px; color: var(--gray-neutral); margin-bottom: 4px;">From: { shortenAddress(deposit.FromAddress) }</p>
				<p style="font-size: 14px; color: var(--gray-neutral);">To: { shortenAddress(deposit.ToAddress) }</p>
			</div>
			<div style="padding: 8px 16px; border-radius: 24px; background: rgba(254, 116, 69, 0.1); border: 1px solid var(--arkiv-orange); color: var(--arkiv-orange); font-size: 12px; font-weight: 700; text-transform: uppercase;">
				Waiting: { formatTimeDiff(deposit.TimeSinceSeconds) }
			</div>
		</div>
		<div>
			<h4 style="font-size: 10px; font-weight: 600; color: var(--gray-neutral); text-transform: uppercase; letter-spacing: 0.05em; margin-bottom: 12px;">L1 Deposit</h4>
			<p style="font-size: 14px; color: var(--black); margin-bottom: 4px;">Block: { fmt.Sprintf("%d", deposit.L1BlockNumber) }</p>
			<p style="font-size: 14px; color: var(--black); margin-bottom: 4px;">Time: { formatTime(deposit.L1Timestamp) }</p>
			<p style="font-size: 14px; color: var(--arkiv-blue); word-break: break-all;">Tx: { shortenAddress(deposit.TxHashL1) }</p>
		</div>
	</div>
}

// DepositItem displays a single deposit
templ DepositItem(deposit DepositPair) {
	<div class="golem-card">
		<div style="display: flex; justify-content: space-between; align-items: flex-start; margin-bottom: 24px;">
			<div>
				<h3 style="font-size: 1.25rem; font-weight: 700; color: var(--black); margin-bottom: 8px;">{ fmt.Sprintf("%.4f ETH", deposit.Amount) }</h3>
				<p style="font-size: 14px; color: var(--gray-neutral); margin-bottom: 4px;">From: { shortenAddress(deposit.FromAddress) }</p>
				<p style="font-size: 14px; color: var(--gray-neutral);">To: { shortenAddress(deposit.ToAddress) }</p>
			</div>
			<div style="padding: 8px 16px; border-radius: 24px; background: rgba(16, 185, 129, 0.1); border: 1px solid #10b981; color: #10b981; font-size: 12px; font-weight: 700; text-transform: uppercase;">
				{ formatTimeDiff(deposit.TimeDiffSeconds) }
			</div>
		</div>
		<div style="display: grid; grid-template-columns: 1fr 1fr; gap: 24px;">
			<div>
				<h4 style="font-size: 10px; font-weight: 600; color: var(--gray-neutral); text-transform: uppercase; letter-spacing: 0.05em; margin-bottom: 12px;">L1 Deposit</h4>
				<p style="font-size: 14px; color: var(--black); margin-bottom: 4px;">Block: { fmt.Sprintf("%d", deposit.L1BlockNumber) }</p>
				<p style="font-size: 14px; color: var(--black); margin-bottom: 4px;">Time: { formatTime(deposit.L1Timestamp) }</p>
				<p style="font-size: 14px; color: var(--arkiv-blue); word-break: break-all;">Tx: { shortenAddress(deposit.TxHashL1) }</p>
			</div>
			<div>
				<h4 style="font-size: 10px; font-weight: 600; color: var(--gray-neutral); text-transform: uppercase; letter-spacing: 0.05em; margin-bottom: 12px;">L2 Confirmation</h4>
				<p style="font-size: 14px; color: var(--black); margin-bottom: 4px;">Block: { fmt.Sprintf("%d", deposit.L2BlockNumber) }</p>
				<p style="font-size: 14px; color: var(--black); margin-bottom: 4px;">Time: { formatTime(deposit.L2Timestamp) }</p>
				<p style="font-size: 14px; color: var(--arkiv-blue); word-break: break-all;">Tx: { shortenAddress(deposit.TxHashL2) }</p>
			</div>
		</div>
	</div>
}

// TimeSeriesChart displays a chart of deposit time differences over time
templ TimeSeriesChart(pathPrefix string) {
	<div hx-swap="morphdom">
		<h2 class="section-title">Deposit Confirmation Times</h2>
		<div class="golem-card">
		<div style="position: relative; height: 400px;">
			<canvas id="timeSeriesChart"></canvas>
		</div>
		<script src={ prefixURL(pathPrefix, "/static/js/chart.min.js") }></script>
		<script src={ prefixURL(pathPrefix, "/static/js/chartjs-adapter-date-fns.min.js") }></script>
		<script>
			// Chart instance to enable updates
			let timeSeriesChart;

			// Initialize the chart once
			function initializeChart() {
				const ctx = document.getElementById('timeSeriesChart');
				timeSeriesChart = new Chart(ctx, {
					type: 'line',
					data: {
						datasets: [{
							label: 'Confirmation Time (seconds)',
							data: [],
							backgroundColor: 'rgba(24, 30, 169, 0.1)',
							borderColor: '#181EA9',
							borderWidth: 3,
							pointStyle: 'circle',
							pointRadius: 4,
							pointBackgroundColor: '#181EA9',
							pointBorderColor: '#ffffff',
							pointBorderWidth: 2,
							pointHoverRadius: 6,
							pointHoverBackgroundColor: '#FE7445',
							pointHoverBorderColor: '#ffffff',
							tension: 0.05,
							fill: true
						}]
					},
					options: {
						responsive: true,
						maintainAspectRatio: false,
						plugins: {
							title: {
								display: false
							},
							legend: {
								display: false
							},
							tooltip: {
								backgroundColor: 'rgba(31, 31, 31, 0.95)',
								titleColor: '#ffffff',
								bodyColor: '#ffffff',
								borderColor: '#FE7445',
								borderWidth: 2,
								callbacks: {
									title: function(context) {
										// Simply format the x value directly
										if (context[0].parsed.x) {
											const date = new Date(context[0].parsed.x);
											return date.toLocaleString();
										}
										return '';
									}
								}
							}
						},
						scales: {
							y: {
								title: {
									display: true,
									text: 'Seconds',
									color: '#1F1F1F'
								},
								beginAtZero: true,
								ticks: {
									color: '#1F1F1F'
								},
								grid: {
									color: 'rgba(172, 172, 172, 0.2)'
								}
							},
							x: {
								type: 'time',
								time: {
									unit: 'hour',
									displayFormats: {
										hour: 'MMM d, HH:mm'
									},
									tooltipFormat: 'MMM d, yyyy HH:mm'
								},
								title: {
									display: true,
									text: 'Date',
									color: '#1F1F1F'
								},
								ticks: {
									color: '#1F1F1F'
								},
								grid: {
									color: 'rgba(172, 172, 172, 0.2)'
								}
							}
						}
					}
				});
			}

			// Function to fetch data and update the chart
			function updateChart() {
				fetch('{{ prefixURL(pathPrefix, "/api/chart-data") }}')
					.then(response => response.json())
					.then(data => {
						// Create dataset with proper timestamp objects
						const dataset = data.map(point => {
							return {
								x: new Date(point.timestamp),
								y: point.timeDiffSeconds
							};
						});

						// Update chart data without destroying the chart
						if (timeSeriesChart) {
							timeSeriesChart.data.datasets[0].data = dataset;
							timeSeriesChart.update();
						}
					})
					.catch(error => console.error('Error fetching chart data:', error));
			}

			// Initialize chart once
			initializeChart();
			
			// Initial data load
			updateChart();

			// Refresh data every 10 seconds
			setInterval(updateChart, 10000);
		</script>
		</div>
	</div>
}
