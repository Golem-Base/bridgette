// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package sqlitestore

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.getBlockPointerStmt, err = db.PrepareContext(ctx, getBlockPointer); err != nil {
		return nil, fmt.Errorf("error preparing query GetBlockPointer: %w", err)
	}
	if q.insertL1StandardBridgeETHDepositInitiatedStmt, err = db.PrepareContext(ctx, insertL1StandardBridgeETHDepositInitiated); err != nil {
		return nil, fmt.Errorf("error preparing query InsertL1StandardBridgeETHDepositInitiated: %w", err)
	}
	if q.insertL2StandardBridgeDepositFinalizedStmt, err = db.PrepareContext(ctx, insertL2StandardBridgeDepositFinalized); err != nil {
		return nil, fmt.Errorf("error preparing query InsertL2StandardBridgeDepositFinalized: %w", err)
	}
	if q.updateBlockPointerStmt, err = db.PrepareContext(ctx, updateBlockPointer); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateBlockPointer: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.getBlockPointerStmt != nil {
		if cerr := q.getBlockPointerStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getBlockPointerStmt: %w", cerr)
		}
	}
	if q.insertL1StandardBridgeETHDepositInitiatedStmt != nil {
		if cerr := q.insertL1StandardBridgeETHDepositInitiatedStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing insertL1StandardBridgeETHDepositInitiatedStmt: %w", cerr)
		}
	}
	if q.insertL2StandardBridgeDepositFinalizedStmt != nil {
		if cerr := q.insertL2StandardBridgeDepositFinalizedStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing insertL2StandardBridgeDepositFinalizedStmt: %w", cerr)
		}
	}
	if q.updateBlockPointerStmt != nil {
		if cerr := q.updateBlockPointerStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateBlockPointerStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                                            DBTX
	tx                                            *sql.Tx
	getBlockPointerStmt                           *sql.Stmt
	insertL1StandardBridgeETHDepositInitiatedStmt *sql.Stmt
	insertL2StandardBridgeDepositFinalizedStmt    *sql.Stmt
	updateBlockPointerStmt                        *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                  tx,
		tx:                  tx,
		getBlockPointerStmt: q.getBlockPointerStmt,
		insertL1StandardBridgeETHDepositInitiatedStmt: q.insertL1StandardBridgeETHDepositInitiatedStmt,
		insertL2StandardBridgeDepositFinalizedStmt:    q.insertL2StandardBridgeDepositFinalizedStmt,
		updateBlockPointerStmt:                        q.updateBlockPointerStmt,
	}
}
